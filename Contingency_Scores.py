#Author: Sepehr Roudini.
#Date: 04/17/2018.
#University of Iowa.
#Department of Chemical Engineering.
#Purpose: Calculatig scores for contingency table.


#--------------------------------------------------------------------------------------------#
#Defining function and importing necessary libraries.
#--------------------------------------------------------------------------------------------#

##############################################################################################
#Libraries used in this function are: numpy.
##############################################################################################
#Table: A 2d array each row is for forcast
#and each column for observation.
##############################################################################################
#This functions returnes respectively
#joint distributions ,portion correct, 
#Heidke skill score and Pierce skill
#score for contingency table.
##############################################################################################
def Calculate_Scores(Table):
#numpy is for data manipulationt
 import  numpy as np
#--------------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------------#


#--------------------------------------------------------------------------------------------#
#Calculating joint distribution
#--------------------------------------------------------------------------------------------#
 Table = np.asanyarray(Table)
 joint = Table/np.sum(Table)
#--------------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------------#


#--------------------------------------------------------------------------------------------#
#Calculating portion correct
#--------------------------------------------------------------------------------------------#
 elem = []
 for i in range(np.shape(Table)[0]):
    elem.append(Table[i,i])
 pc = np.sum(np.asanyarray(elem))/np.sum(Table)
#--------------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------------#


#--------------------------------------------------------------------------------------------#
#Calculating Heidke skill score
#--------------------------------------------------------------------------------------------#
 po = np.sum(Table,axis=0)/np.sum(Table)
 py = np.sum(Table,axis=1)/np.sum(Table)
 HSS = (pc - np.sum(po*py))/(1-np.sum(po*py))
#--------------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------------#


#--------------------------------------------------------------------------------------------#
#Calculating Pierce skill score
#--------------------------------------------------------------------------------------------#
 PSS = (pc-  np.sum(po*py))/(1-np.sum(po*po))
 return joint,pc,HSS,PSS
#--------------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------------#


